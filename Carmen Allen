import React, { useState, useEffect } from "react";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import { Card } from "@/components/ui/card";
import * as XLSX from 'xlsx';

const implementationTypes = ["Host", "Archtics", "Host & Archict", "Sport XR"];
const regions = { 
  USA: ["Las Vegas", "New York", "Los Angeles", "Chicago", "Houston", "Miami"], 
  Canada: ["Toronto", "Vancouver", "Montreal", "Calgary", "Ottawa"], 
  Mexico: ["Mexico City", "Guadalajara", "Monterrey", "CancÃºn", "Tijuana", "Puebla"] 
};
const priceColors = ["bg-green-400", "bg-yellow-400", "bg-red-400"];

export default function CalendarApp() {
  const [type, setType] = useState("Host");
  const [region, setRegion] = useState("USA");
  const [area, setArea] = useState("Las Vegas");
  const [startDate, setStartDate] = useState(new Date());
  const [accountName, setAccountName] = useState("");
  const [transactionalReadiness, setTransactionalReadiness] = useState(null);
  const [operationalReadiness, setOperationalReadiness] = useState(null);

  useEffect(() => {
    if (type === "Host") {
      const transactionalDate = new Date(startDate);
      transactionalDate.setDate(transactionalDate.getDate() + 25);
      setTransactionalReadiness(transactionalDate);

      const operationalDate = new Date(transactionalDate);
      operationalDate.setDate(operationalDate.getDate() + 30);
      setOperationalReadiness(operationalDate);
    }
  }, [type, startDate]);

  const exportToExcel = () => {
    const data = [
      {
        "Implementation Type": type,
        "Region": region,
        "Area": area,
        "Account Name": accountName,
        "Start Date": startDate.toDateString(),
        "Transactional Readiness": transactionalReadiness ? transactionalReadiness.toDateString() : "",
        "Operational Readiness": operationalReadiness ? operationalReadiness.toDateString() : ""
      }
    ];

    const ws = XLSX.utils.json_to_sheet(data);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "Sheet1");
    XLSX.writeFile(wb, "Implementation_Data.xlsx");
  };

  return (
    <div className="p-4 max-w-lg mx-auto">
      <Card className="p-4 space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="border p-2 rounded">
            <label className="block text-sm font-medium">Implementation Type</label>
            <select onChange={(e) => setType(e.target.value)} value={type} className="w-full p-2 border rounded">
              {implementationTypes.map((t) => (
                <option key={t} value={t}>{t}</option>
              ))}
            </select>
          </div>

          <div className="border p-2 rounded">
            <label className="block text-sm font-medium">Region</label>
            <select onChange={(e) => { setRegion(e.target.value); setArea(regions[e.target.value][0]); }} value={region} className="w-full p-2 border rounded">
              {Object.keys(regions).map((r) => (
                <option key={r} value={r}>{r}</option>
              ))}
            </select>
          </div>

          <div className="border p-2 rounded">
            <label className="block text-sm font-medium">Area</label>
            <select onChange={(e) => setArea(e.target.value)} value={area} className="w-full p-2 border rounded">
              {regions[region].map((a) => (
                <option key={a} value={a}>{a}</option>
              ))}
            </select>
          </div>
        </div>

        <div className="border p-2 rounded">
          <label className="block text-sm font-medium">Account Name</label>
          <input type="text" value={accountName} onChange={(e) => setAccountName(e.target.value)} className="w-full p-2 border rounded" />
        </div>

        <div className="border p-2 rounded mt-4">
          <label className="block text-sm font-medium">Start Date</label>
          <DatePicker selected={startDate} onChange={(date) => setStartDate(date)} className="border p-2 w-full" />
        </div>

        <div className="mt-4 text-center text-lg font-semibold">
          {startDate.toLocaleString('default', { month: 'long' })}
        </div>

        <div className="mt-4 grid grid-cols-7 gap-2 text-center">
          {Array.from({ length: 25 }, (_, i) => {
            const date = new Date(startDate);
            date.setDate(startDate.getDate() + i);
            const color = i < 5 ? priceColors[0] : i < 20 ? priceColors[1] : priceColors[2];
            return (
              <div key={i} className={`p-2 ${color} text-white rounded-full w-10 h-10 flex items-center justify-center`}>
                {date.getDate()}
              </div>
            );
          })}
        </div>

        {transactionalReadiness && (
          <div className="border p-2 rounded mt-4">
            <label className="block text-sm font-medium">Transactional Readiness</label>
            <p>{transactionalReadiness.toDateString()}</p>
          </div>
        )}

        {operationalReadiness && (
          <div className="border p-2 rounded mt-4">
            <label className="block text-sm font-medium">Operational Readiness</label>
            <p>{operationalReadiness.toDateString()}</p>
          </div>
        )}

        <button onClick={exportToExcel} className="mt-4 p-2 bg-blue-500 text-white rounded">Export to Excel</button>
      </Card>
    </div>
  );
}
